name: scan_build

on:
  pull_request:
    types: [labeled]
  workflow_dispatch:
  schedule:
    - cron:  '0 9 * * 1' # 9:00am UTC, 1:00am PST every Monday.

env:
  PACKAGE_NAME: maliput_infrastructure
  ROS_DISTRO: foxy
  ROS_WS: maliput_ws

jobs:
  static_analysis:
    if: ${{ contains(github.event.pull_request.labels.*.name, 'do-static-analyzer-test') || github.event_name == 'schedule'  || github.event_name == 'workflow_dispatch'}}
    name: Static analysis
    runs-on: ubuntu-latest
    container:
      image: rostooling/setup-ros-docker:ubuntu-focal-latest
    env:
      CC: clang-8
      CXX: clang++-8
      LDFLAGS: -fuse-ld=lld-8
    steps:
    - name: Install ros2-apt-source
      shell: bash
      run: |
        apt install curl -y;
        export ROS_APT_SOURCE_VERSION=$(curl -s https://api.github.com/repos/ros-infrastructure/ros-apt-source/releases/latest | grep -F "tag_name" | awk -F\" '{print $4}');
        curl -L -o /tmp/ros2-apt-source.deb "https://github.com/ros-infrastructure/ros-apt-source/releases/download/${ROS_APT_SOURCE_VERSION}/ros2-apt-source_${ROS_APT_SOURCE_VERSION}.$(. /etc/os-release && echo $VERSION_CODENAME)_all.deb";
        apt install /tmp/ros2-apt-source.deb;
        apt update;
    - uses: actions/checkout@v4
      with:
        path: ${{ env.ROS_WS }}/src/${{ env.PACKAGE_NAME }}
    - name: clang 8 install
      shell: bash
      working-directory: ${{ env.ROS_WS }}/src
      run: ./${PACKAGE_NAME}/.github/clang_suite_installation.sh
    # clone public dependencies
    - name: vcs import
      shell: bash
      working-directory: ${{ env.ROS_WS }}
      run: vcs import src < src/${PACKAGE_NAME}/.github/dependencies.repos
    - name: check if dependencies have a matching branch
      shell: bash
      working-directory: ${{ env.ROS_WS }}/src
      run: ./${PACKAGE_NAME}/.github/try_vcs_checkout ${GITHUB_HEAD_REF:-${GITHUB_REF#refs/heads/}} .
    - run: colcon graph
      shell: bash
      working-directory: ${{ env.ROS_WS }}
    - name: rosdep install
      shell: bash
      working-directory: ${{ env.ROS_WS }}
      run: |
        rosdep update --include-eol-distros;
        rosdep install  -i -y --rosdistro ${ROS_DISTRO} --from-paths src
    - name: install drake
      shell: bash
      working-directory: ${{ env.ROS_WS }}/src/drake_vendor
      run: ./drake_installer
    - name: scan_build
      shell: bash
      working-directory: ${{ env.ROS_WS }}/src
      run: |
        . /opt/ros/${ROS_DISTRO}/setup.bash;
        ${PACKAGE_NAME}/tools/run_scan_build.py \
          --event-handlers=console_direct+;
    # upload artifact
    - uses: actions/upload-artifact@v4
      if: failure()
      with:
        name: scan-build-output
        path: /tmp/scan-build*/*
        retention-days: 6
