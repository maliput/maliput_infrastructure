#! /bin/bash

PREREQS_TAGS=${PREREQS_TAGS:-default}

# Checks whether prerequisites should be installed
# interactively (i.e. issuing user prompts) or not.
prereqs.interactive() {
    [ ${PREREQS_INTERACTIVE:-1} -eq 1 ]
}

# Initializes a prerequisite script.
prereqs.init() {
    me=$1

    at_exit () {
        echo "${me} has experienced an error on line ${LINENO}" \
             "while running the command ${BASH_COMMAND}"
    }

    trap at_exit EXIT
}

# Terminates prerequisite installation immediately.
#
# Arguments
#   $@ -> message
prereqs.die () {
    echo "$@" 1>&2
    trap : EXIT  # Disable line number reporting; the "$@" message is enough.
    exit 1
}

# Mark prerequisite installation as done, effectively
# leaving the script immediately.
prereqs.done () {
    trap : EXIT  # Disable line number reporting
    exit 0
}

# Pulls apt keys from a few well known keyservers.
#
# We've seen the "default" keyserver (p80.pool.sks-keyservers.net) fail somewhat
# often.  This function will try the default, followed by some alternates to
# reduce the number of times builds fail because of key problems.
#
# Arguments
#    $1 -> apt key
# Asserts
#    That apt key pulling was successful.
prereqs.pull_apt_keys() {
    success=0
    for keyserver in hkp://p80.pool.sks-keyservers.net:80 hkp://pgp.mit.edu:80 hkp://keyserver.ubuntu.com:80 ; do
        apt-key adv --keyserver $keyserver --recv-keys $1 || continue
        success=1
        break
    done

    ASSERT_MSG="Failed to pull APT keys from keyservers" prereqs.assert [ $success -eq 1 ]
}

# Installs apt repository into system wide sources list.
#
# Arguments
#   $1 -> name of the repository, to be used as sources list prefix.
#   $2 -> url of the repository.
#   $3 -> apt key for the repository.
prereqs.install_apt_repo() {
    REPO_NAME=$1
    REPO_URL=$2
    REPO_KEY=$3

    if ! grep -q "^deb .*$REPO_URL" /etc/apt/sources.list /etc/apt/sources.list.d/*; then
        echo "deb $REPO_URL $(lsb_release -cs) main" | \
        tee --append /etc/apt/sources.list.d/$REPO_NAME.list > /dev/null
        prereqs.pull_apt_keys $REPO_KEY
        echo "Apt Repo '$REPO_NAME'..........................installed"
    else
        echo "Apt Repo '$REPO_NAME'..........................found"
    fi
}

# Wraps the apt command.
#
# If prerequisites installation is not interactive, enforce that
# through command line options.
prereqs.apt() {
    VERB=${@:1:1}
    ARGS=${@:2:$#}
    if ! prereqs.interactive; then
        ARGS="-y ${ARGS}"
    fi
    apt ${VERB} ${ARGS}
}

# Wraps the apt-get command.
#
# If prerequisites installation is not interactive, enforce that
# through command line options.
prereqs.apt-get() {
    VERB=${@:1:1}
    ARGS=${@:2:$#}
    if ! prereqs.interactive; then
        ARGS="-y ${ARGS}"
    fi
    apt-get ${VERB} ${ARGS}
}

# Asserts that a condition holds true.
#
# Arguments
#   $@ -> condition to assert on, as a command.
#
# Environment
#   $ASSERT_MSG -> If defined, use as the assertion message.
#   $DEBUG -> If defined and non-empty, print the assertion.
prereqs.assert() {
    if [ ! -z "$DEBUG" ]; then
        echo "ASSERT $@"
    fi
    if ! $@; then
        prereqs.die "${ASSERT_MSG:-$@ assert failed}";
    fi
}

# Asserts that a condition does not hold true.
#
# Arguments
#   $@ -> condition to assert on, as a command.
#
# Environment
#   $ASSERT_MSG -> If defined, use as the assertion message.
#   $DEBUG -> If defined and non-empty, print the assertion.
prereqs.assert_not() {
    if [ ! -z "$DEBUG" ]; then
        echo "ASSERT_NOT $@"
    fi
    if $@; then
        prereqs.die "${ASSERT_MSG:-$@ assert failed}";
    fi
}

# Asserts that user is root (i.e. sudo has been used).
prereqs.assert_sudo() {
    ASSERT_MSG="${me} must run as root. Please use sudo." prereqs.assert [ "${EUID}" -eq 0 ]
}

# Checks whether a given set of tags have been specified and thus apply.
#
# Arguments
#   $1 -> set of tags as a regular expression.
prereqs.tag_applies() {
    IFS="," read -r -a tags <<< "$PREREQS_TAGS"
    [[ "${tags[@]}" =~ $1 ]]
}

test_prereqs.interactive() {
    PREREQS_INTERACTIVE=1 prereqs.assert prereqs.interactive
    PREREQS_INTERACTIVE=0 prereqs.assert_not prereqs.interactive
}
test_prereqs.interactive

test_prereqs.tag_applies() {
    PREREQS_TAGS= prereqs.assert_not prereqs.tag_applies "some-tag"
    PREREQS_TAGS="another-tag" prereqs.assert_not prereqs.tag_applies "some-tag"
    PREREQS_TAGS="another-tag,some-tag" prereqs.assert prereqs.tag_applies "some-tag"
    PREREQS_TAGS="some-tag-v1,some-tag-v2" prereqs.assert prereqs.tag_applies ".*-tag-v1"
}
test_prereqs.tag_applies
