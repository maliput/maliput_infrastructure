#!/usr/bin/env python3

import argparse

import os
import subprocess
import sys

PATH_TO_BASH_LIBS = os.path.dirname(os.path.realpath(__file__))


def collect_prerequisites(path, prereqs_names=['prereqs'], excluded_paths=[]):
    path = os.path.realpath(path)
    if any(path.startswith(xpath) for xpath in excluded_paths):
        return
    if os.path.isfile(path):
        if not os.access(path, os.X_OK):
            raise ValueError("{} is not an executable file".format(path))
        yield path
    elif os.path.isdir(path):
        for dirpath, dirnames, filenames in os.walk(path):
            if any(dirpath.startswith(xpath) for xpath in excluded_paths):
                dirnames[:] = []
                continue
            for name in filenames:
                fullpath = os.path.join(dirpath, name)
                if any(fullpath.startswith(xpath) for xpath in excluded_paths):
                    continue
                if not any(name.endswith(pname) for pname in prereqs_names):
                    continue
                if not os.access(fullpath, os.X_OK):
                    continue
                yield fullpath
    else:
        raise ValueError("{} is not a file nor a directory".format(path))


if __name__ == '__main__':
    parser = argparse.ArgumentParser(
        description='Prerequisites installation tool',
        formatter_class=argparse.ArgumentDefaultsHelpFormatter
    )
    parser.add_argument(
        'paths', nargs='+',
        help='Paths to crawl recursively during prerequisite lookup.'
    )
    parser.add_argument(
        '-t', '--tag', dest='tags', action='append', default=[],
        help=('Tags to narrow down prerequisite installation. Each '
              'prerequisites script may choose what to include under '
              'which tag. Conventionally, the \'default\' tag is given '
              'when no tag is specified, and the \'all\' tag is expected '
              'to result in full installation without any pruning.')
    )
    parser.add_argument(
        '-x', '--excluded-paths', nargs='+', default=[],
        help=('Paths to exclude during prerequisite lookup. If a directory '
              'is given, said directory will not be crawled.')
    )
    parser.add_argument(
        '-a', '--alt-name', dest='alt_names', action='append', default=[],
        help=('Alternative name for prerequisite executable files. By '
              'default, the tool will only look for files named \'prereqs\'.')
    )
    parser.add_argument(
        '-k', '--keep-going', action='store_true', default=False,
        help='Keep going with the installation ignoring any errors.'
    )
    parser.add_argument(
        '-i', '--interactive', action='store_true', default=False,
        help='Force interactive installation i.e. do prompt for user input.'
    )
    parser.add_argument(
        '-q', '--quiet', action='store_true', default=False,
        help='Print prerequisite installation outcome only.'
    )
    parser.add_argument(
        '-v', '--verbose', action='store_true', default=False,
        help='Print prerequisite installation output.'
    )
    parser.add_argument(
        '-vv', '--vverbose', action='store_true', default=False,
        help='Print prerequisite installation raw output.'
    )

    args = parser.parse_args()

    prereqs_names = ['prereqs', *args.alt_names]
    excluded_paths = [os.path.realpath(path) for path in args.excluded_paths]

    env = dict(os.environ)
    if args.tags:
        env['PREREQS_TAGS'] = ','.join(args.tags)
    if args.interactive:
        env['PREREQS_INTERACTIVE'] = '1'
        env['DEBIAN_FRONTEND'] = 'interactive'
    else:
        env['PREREQS_INTERACTIVE'] = '0'
        env['DEBIAN_FRONTEND'] = 'noninteractive'
    env['PATH'] = ':'.join([env.get('PATH', ''), PATH_TO_BASH_LIBS])

    if not args.quiet:
        print('┌ Checking configuration...')
        if 'PREREQS_TAGS' in env and env['PREREQS_TAGS']:
            print('│  Tags: ', env['PREREQS_TAGS'])
        interactive = 'no'
        if int(env['PREREQS_INTERACTIVE']) != 0:
            interactive = 'yes'
        print('│  Interactive: ', interactive)
        if args.excluded_paths:
            print('│  Excluded paths: ')
            for path in args.excluded_paths:
                print('│    - ', path)
        print('└ Ready for installation')
    exitcode = 0
    paths_processed = []
    for path in args.paths:
        try:
            for path_to_prereqs in collect_prerequisites(
                path, prereqs_names, excluded_paths
            ):
                print('• Installing prerequisites at ', path_to_prereqs, flush=True)
                have_raw_output = args.interactive or args.vverbose
                process = subprocess.run(
                    path_to_prereqs,
                    stdout=subprocess.PIPE if not have_raw_output else None,
                    stderr=subprocess.PIPE if not have_raw_output else None,
                    shell=True,
                    env=env
                )
                if not have_raw_output:
                    if args.verbose or (not args.quiet and process.returncode != 0):
                        stdout_lines = process.stdout.decode('utf-8').splitlines()
                        stderr_lines = process.stderr.decode('utf-8').splitlines()
                        max_line_length = 0
                        if stdout_lines:
                            max_line_length = max(len(line) for line in stdout_lines)
                        if stderr_lines:
                            max_line_length = max(
                                max(len(line) for line in stderr_lines), max_line_length
                            )
                        if stdout_lines:
                            title=' Captured stdout '
                            mark_length = (max_line_length - len(title)) // 2
                            print('│ ', '=' * mark_length, title, '=' * mark_length)
                            for line in stdout_lines:
                                print('│ ', line)
                        if stderr_lines:
                            title=' Captured stderr '
                            mark_length = (max_line_length - len(title)) // 2
                            print('│ ', '=' * mark_length, title, '=' * mark_length)
                            for line in stderr_lines:
                                print('│ ', line)
                if process.returncode != 0:
                    print('└─ ✗ Exited with non-zero exit code: ',
                          process.returncode, flush=True)
                    if not args.keep_going:
                        sys.exit(process.returncode)
                    exitcode = 1
                else:
                    print('└─ ✓ Done', flush=True)
                paths_processed.append(path_to_prereqs)
        except ValueError as e:
            print('✗ Failed prerequisite lookup: {}'.format(str(e)), flush=True)
            exitcode = 1
            if not args.keep_going:
                break
    if not paths_processed and not args.quiet:
        print('? No prerequisites were processed')
    sys.exit(exitcode)
